#include "Tools.h"

// Aggregator
typedef struct {
    mpz_class ID;
    mpz_class alpha;
} UAV_h;

// Ordinary signer in the signer group, where c1 and c2 are shares of the reconstruction key
typedef struct {
    vector<mpz_class> c1;
    vector<mpz_class> c2;
    mpz_class ID;
} UAV;

typedef struct {
    int n;               // Number of signers
    int tm;              // Maximum threshold
    mpz_class q;         // Order of the curve
    ECP2 P2;             // Generator of G2
    mpz_class g;         // Group generator
    mpz_class beta;      // System parameter
    vector<ECP2> PK;     // Public key set
} Params;

typedef struct {
    mpz_class cj;        // Signature component
    ECP sig;             // Signature point in G1
    mpz_class ID;        // Signer ID
} parSig;

typedef struct {
    vector<mpz_class> aux;  // Auxiliary values
    vector<ECP> sig;        // Signatures
    vector<mpz_class> IDs;  // Signer IDs
} Sigma;

/**
 * @brief Gets all prime factors of q-1 for the BLS12-381 curve order q
 * @return Vector of prime factors
 */
vector<mpz_class> getFactors();

/**
 * @brief Checks if x is coprime with all elements in factors
 * @param x Value to check
 * @param factors Prime factors of q-1
 * @return Returns true if coprime, otherwise false
 */
bool isCoprime(mpz_class x, vector<mpz_class> factors);

/**
 * @brief Hashes beHashed to a value coprime with q-1
 * @param beHashed Value to hash
 * @param module Modulus value
 * @param factors Prime factors of q-1
 * @return Hashed value that is coprime with q-1
 */
mpz_class hashToCoprime(mpz_class beHashed, mpz_class module, vector<mpz_class> factors);

/**
 * @brief Initializes the CTS system
 * @param alpha Aggregator’s private key
 * @param n Number of signers
 * @param tm Maximum threshold
 * @return Public parameters of the CTS system
 */
Params Setup(mpz_class &alpha, int n, int tm);

/**
 * @brief Generates the public key set for CTS
 * @param b Secret factors
 * @return Public key set
 */
vector<ECP2> getPK(vector<mpz_class> b);

/**
 * @brief Generates the share reconstruction key for a single signer
 * @param pp System public parameters
 * @param d Array of random values
 * @param b Array of random values
 * @param id Signer’s ID
 * @return Share reconstruction key and ID for the signer
 */
UAV getUAV(Params pp, vector<mpz_class> d, vector<mpz_class> b, mpz_class id);

/**
 * @brief Generates share reconstruction keys for all signers
 * @param params System public parameters
 * @param alpha Aggregator’s private key
 * @param uavH Aggregator
 * @return Share reconstruction keys and IDs for all signers
 */
vector<UAV> KeyGen(Params &params, mpz_class alpha, UAV_h &uavH);

/**
 * @brief Generates a signature from signer i
 * @param pp System public parameters
 * @param uav Signer i
 * @param t Threshold required by the verifier
 * @param M Message to be signed
 * @return Partial signature generated by signer i
 */
parSig Sign(Params pp, UAV uav, int t, mpz_class M);

/**
 * @brief Collects partial signatures from all signers
 * @param pp System public parameters
 * @param UAVs All signers
 * @param t Threshold required by the verifier
 * @param M Message to be signed
 * @return Partial signatures from all signers
 */
vector<parSig> collectSig(Params pp, vector<UAV> UAVs, int t, mpz_class M);

/**
 * @brief Aggregator converts collected partial signatures for verification
 * @param parSigs Collected partial signatures
 * @param pp System public parameters
 * @param uavH Aggregator
 * @param PK_v Verifier’s public key
 * @return Aggregated signature converted by the aggregator
 */
Sigma AggSig(vector<parSig> parSigs, Params pp, UAV_h uavH, mpz_class PK_v);

/**
 * @brief Computes the Lagrange coefficient for a given signer
 * @param pp System public parameters
 * @param ID Signer’s ID
 * @param t Threshold required by the verifier
 * @return Lagrange coefficient for the signer
 */
vector<mpz_class> getPi_0(Params pp, vector<mpz_class> ID, int t);

/**
 * @brief Verifies if the signature is valid
 * @param sigma The signature
 * @param sk_v Verifier’s private key
 * @param pp System public parameters
 * @param M Message to be signed
 * @param t Threshold required by the verifier
 * @return Returns 1 if valid, otherwise 0
 */
int Verify(Sigma sigma, mpz_class sk_v, Params pp, mpz_class M, int t);
